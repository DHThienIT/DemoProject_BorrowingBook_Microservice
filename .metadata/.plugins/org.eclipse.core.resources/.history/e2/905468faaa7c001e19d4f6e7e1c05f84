package com.thien.borrowingservice.command.api.saga;

import org.axonframework.commandhandling.gateway.CommandGateway;
import org.axonframework.messaging.responsetypes.ResponseTypes;
import org.axonframework.modelling.saga.SagaEventHandler;
import org.axonframework.modelling.saga.SagaLifecycle;
import org.axonframework.modelling.saga.StartSaga;
import org.axonframework.queryhandling.QueryGateway;
import org.axonframework.spring.stereotype.Saga;
import org.springframework.beans.factory.annotation.Autowired;

import com.thien.borrowingservice.command.api.commands.DeleteBorrowCommand;
import com.thien.borrowingservice.command.api.events.BorrowCreatedEvent;
import com.thien.commonservice.command.UpdateStatusBookCommand;
import com.thien.commonservice.model.BookResponseCommonModel;
import com.thien.commonservice.querys.GetDetailsBookQuery;

@Saga
public class BorrowingSaga {
	@Autowired
	private transient CommandGateway commandGateway;

	@Autowired
	private transient QueryGateway queryGateway;

	@StartSaga // được thực hiện sau khi đã hoàn thành quá trình @EventHandler trong
				// browingEventsHandler
	@SagaEventHandler(associationProperty = "id") // @TargetAggregateIdentifier của BorrowCreatedEvent
	private String handle(BorrowCreatedEvent event) {
		System.out.println("==>> BorrowCreatedEvent in Saga for BookId : " + event.getBookId() + " : EmployeeId :  "
				+ event.getEmployeeId());
		try {
			SagaLifecycle.associateWith("bookId", event.getBookId());
			GetDetailsBookQuery getDetailsBookQuery = new GetDetailsBookQuery(event.getBookId());
			BookResponseCommonModel bookResponseModel;
			try {
				bookResponseModel = queryGateway
						.query(getDetailsBookQuery, ResponseTypes.instanceOf(BookResponseCommonModel.class)).join();
			} catch (Exception e) {
				return "Không thể lấy GetDetailsBookQuery";
			}

			if (bookResponseModel.getIsReady() == true) {
				UpdateStatusBookCommand command = new UpdateStatusBookCommand(event.getBookId(), false,
						event.getEmployeeId(), event.getId());
				commandGateway.sendAndWait(command);
				return "Đã gửi thành công";
			} else {
				throw new Exception("Sach Da co nguoi Muon");
			}
		} catch (Exception e) {
			rollBackBorrowRecord(event.getId());
			System.out.println(e.getMessage());
		}
		return "Lỗi";
	}

	private void rollBackBorrowRecord(String id) {
		commandGateway.sendAndWait(new DeleteBorrowCommand(id));
	}
}
